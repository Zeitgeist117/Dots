#+PROPERTY: header-args :tangle xmonad.hs
* Table of Contents :toc:
  - [[#imports][Imports]]
  - [[#autostart][Autostart]]
  - [[#common-variables][Common Variables]]
  - [[#main-config][Main Config]]
  - [[#keybindings][Keybindings]]

** Imports
#+begin_src haskell
import XMonad
import XMonad.Util.EZConfig
import XMonad.Util.Ungrab
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.DynamicLog
import XMonad.Util.SpawnOnce
import XMonad.Hooks.SetWMName
import XMonad.Hooks.ManageDocks
import XMonad.Layout.Spacing
import XMonad.Actions.CycleWS
import XMonad.Util.NamedScratchpad
import XMonad.StackSet as W
import XMonad.ManageHook
#+end_src

** Autostart

#+begin_src haskell 
myStartupHook :: X ()
myStartupHook = do 
    spawnOnce "picom --experimental-backends &"
    spawnOnce "/usr/bin/emacs --daemon &"
    spawnOnce "xclip &"
    spawnOnce "~/.fehbg"
    spawnOnce "syncthing &"
    spawnOnce "mpd"
    spawnOnce "easyeffects --gapplication-service"
    setWMName "LG3D"
    return () >> checkKeymap myConfig myKeymap
#+end_src


** Common Variables
#+begin_src haskell
myTerminal, myBrowser, myExplorer :: String
myTerminal = "kitty" :: String
myBrowser = "brave" :: String
myExplorer = "pcmanfm" :: String

#+end_src

** Main Config
#+begin_src haskell
main :: IO ()
main = xmonad $ ewmhFullscreen $ ewmh $ myConfig
  { layoutHook = spacingWithEdge 5 $ Tall 1 (3/100) (1/2) ||| Full  -- leave gaps at the top and right
}
myConfig :: XConfig (Choose Tall (Choose (Mirror Tall) Full))
myConfig = def
    { modMask    = mod4Mask  -- Rebind Mod to the Super key
    , startupHook = myStartupHook
    , manageHook = manageHook def <+> manageDocks <+> namedScratchpadManageHook scratchpads
    , keys = \c -> mkKeymap c myKeymap
    , XMonad.workspaces = ["1","2","3","4","5","6","7","8","9"]
    , focusedBorderColor = "#f8f8f2"
    , normalBorderColor = "#282A36"
    , borderWidth = 3
    }
#+end_src

** Keybindings
#+begin_src haskell
myKeymap =
    [("M-<Space>", spawn "dmenu_run -c -l 20"	)
    ,("M-v"  , spawn myBrowser                  ) -- Launches Web Browser
    ,("M-e"  , spawn myExplorer                 ) -- Launches File Explorer
    ,("M-<Return>"  , spawn myTerminal          ) -- Lauches Terminal
    ,("M-'"  , spawn "emacsclient -c"           )
    ,("M-w"  , kill			        )
    ,("M-S-h"  , prevWS		        )
    ,("M-S-l"  , nextWS		        )
    ,("M-n"  , namedScratchpadAction scratchpads "ncmpcpp"      )
    ,("M-p"  , namedScratchpadAction scratchpads "pulsemixer"      )
    ,("M-g"  , namedScratchpadAction scratchpads "btop"      )
    ]
#+end_src


*** Scratchpads
#+begin_src haskell
scratchpads :: [NamedScratchpad]
scratchpads = [ NS "ncmpcpp" "st -n ncmpcpp -g 100x30 -e ncmpcpp" (title =? "ncmpcpp") centerFloating
              , NS "pulsemixer" "st -n pulsemixer -g 100x30 -e pulsemixer" (title =? "pulsemixer") centerFloating
              , NS "btop" "st -n btop -g 100x30 -e btop" (title =? "btop") centerFloating
              ]where
    centerFloating = customFloating $ W.RationalRect (1/4) (1/4) (1/2) (1/2)
#+end_src
