#+TITLE: Zeitgeist's GNU EMACS Config
#+AUTHOR: Zeitgiest117
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle ~/.config/emacs/config.el

** package manger
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src
** Scripts
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
(require 'buffer-move)
(require 'package)
(package-initialize)
(add-to-list 'package-archives
      '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
 (use-package evil
   :straight t ;; install the evil package if not installed
   :init ;; tweak evil's configuration before loading it
   (setq evil-search-module 'evil-search)
   (setq evil-ex-complete-emacs-commands nil)
   (setq evil-vsplit-window-right t)
   (setq evil-split-window-below t)
   (setq evil-shift-round nil)
   (setq evil-want-C-u-scroll t)
   (setq evil-want-keybinding nil)
   :config ;; tweak evil after loading it
   (evil-mode))
(use-package evil-tutor
  :straight t)
;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
	(define-key evil-motion-state-map (kbd "SPC") nil)
	(define-key evil-motion-state-map (kbd "RET") nil)
	(define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
	(setq org-return-follows-link  t)
(use-package evil-collection
  :after evil
  :straight t
  :config
  (evil-collection-init)
)
#+end_src

** Sane Defaults
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
			 (setq-local electric-pair-inhibit-predicate
					 `(lambda (c)
					(if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq ring-bell-function 'ignore)
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files"))) ;; change backup saves location to trash folder
(setq split-width-threshold nil)
(setq-default message-log-max nil)
;; Kill both buffers on startup.
(kill-buffer "*Messages*")
;; Empty the *scratch* buffer.
(setq initial-scratch-message "")
(kill-buffer "*scratch*")
;; (setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+end_src

* Keybinds
** zooming in and out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
#+begin_src emacs-lisp
  (use-package general
          :straight t    
  	:config
  	(general-evil-setup)

  	;; set up 'SPC' as the global leader key
  	(general-create-definer zg/leader-keys
  	  :states '(normal insert visual emacs)
  	  :keymaps 'override
  	  :prefix "SPC" ;; set leader
  	  :global-prefix "M-SPC") ;; access leader in insert mode

  	(zg/leader-keys
  	  "SPC" '(counsel-M-x :wk "Counsel M-x")
  	  "." '(find-file :wk "Find file")
  	  "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
  	  "c c" '(comment-line :wk "Comment lines")
  	  "u" '(universal-argument :wk "Universal argument"))

  	(zg/leader-keys
  	  "f" '(:ignore t :wk "Files")    
  	  "f c" '((lambda () (interactive)
  				(find-file "~/.config/emacs/config.org")) 
  			  :wk "Open emacs config.org")
  	  "f e" '((lambda () (interactive)
  				(dired "~/.config/emacs/")) 
  			  :wk "Open user-emacs-directory in dired")
  	  "f d" '(find-grep-dired :wk "Search for string in files in DIR")
  	  "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
  	  "f i" '((lambda () (interactive)
  				(find-file "~/.config/emacs/init.el")) 
  			  :wk "Open emacs init.el")
  	  "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
  	  "f l" '(counsel-locate :wk "Locate a file")
  	  "f r" '(counsel-recentf :wk "Find recent files")
  	  "f u" '(sudo-edit-find-file :wk "Sudo find file")
  	  "f U" '(sudo-edit :wk "Sudo edit file"))

  	(zg/leader-keys
  	  "b" '(:ignore t :wk "Bookmarks/Buffers")
  	  "b b" '(switch-to-buffer :wk "Switch to buffer")
  	  "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
  	  "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
  	  "b d" '(bookmark-delete :wk "Delete bookmark")
  	  "b i" '(ibuffer :wk "Ibuffer")
  	  "b k" '(kill-current-buffer :wk "Kill current buffer")
  	  "b K" '(kill-some-buffers :wk "Kill multiple buffers")
  	  "b l" '(list-bookmarks :wk "List bookmarks")
  	  "b m" '(bookmark-set :wk "Set bookmark")
  	  "b n" '(next-buffer :wk "Next buffer")
  	  "b p" '(previous-buffer :wk "Previous buffer")
  	  "b r" '(revert-buffer :wk "Reload buffer")
  	  "b R" '(rename-buffer :wk "Rename buffer")
  	  "b s" '(basic-save-buffer :wk "Save buffer")
  	  "b S" '(save-some-buffers :wk "Save multiple buffers")
  	  "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  	(zg/leader-keys
  	  "e" '(:ignore t :wk "Eshell/Evaluate")    
  	  "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
  	  "e d" '(eval-defun :wk "Evaluate defun containing or after point")
  	  "e e" '(eval-expression :wk "Evaluate and elisp expression")
  	  "e h" '(counsel-esh-history :which-key "Eshell history")
  	  "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
  	  "e r" '(eval-region :wk "Evaluate elisp in region")
  	  "e R" '(eww-reload :which-key "Reload current page in EWW")
  	  "e s" '(eshell :which-key "Eshell")
  	  "e w" '(eww :which-key "EWW emacs web wowser"))

  	(zg/leader-keys
  	  "g" '(:ignore t :wk "Git")    
  	  "g /" '(magit-displatch :wk "Magit dispatch")
  	  "g p" '(magit-push :wk "Magit push")
  	  "g ." '(magit-file-displatch :wk "Magit file dispatch")
  	  "g b" '(magit-branch-checkout :wk "Switch branch")
  	  "g c" '(:ignore t :wk "Create") 
  	  "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
  	  "g c c" '(magit-commit-create :wk "Create commit")
  	  "g c f" '(magit-commit-fixup :wk "Create fixup commit")
  	  "g C" '(magit-clone :wk "Clone repo")
  	  "g f" '(:ignore t :wk "Find") 
  	  "g f c" '(magit-show-commit :wk "Show commit")
  	  "g f f" '(magit-find-file :wk "Magit find file")
  	  "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
  	  "g F" '(magit-fetch :wk "Git fetch")
  	  "g g" '(magit-status :wk "Magit status")
  	  "g i" '(magit-init :wk "Initialize git repo")
  	  "g l" '(magit-log-buffer-file :wk "Magit buffer log")
  	  "g r" '(vc-revert :wk "Git revert file")
  	  "g s" '(magit-stage-file :wk "Git stage file")
  	  "g t" '(git-timemachine :wk "Git time machine")
  	  "g u" '(magit-stage-file :wk "Git unstage file"))

  	 (zg/leader-keys
  	  "h" '(:ignore t :wk "Help")
  	  "h f" '(describe-function :wk "Describe function")
  	  "h v" '(describe-variable :wk "Describe variable")
  	  "h t" '(load-theme :wk "Load theme")    
  	  "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))

  	 (zg/leader-keys
  	   "m" '(:ignore t :wk "Org")
  	   "m a" '(org-agenda :wk "Org agenda")
  	   "m e" '(org-export-dispatch :wk "Org export dispatch")
  	   "m i" '(org-toggle-item :wk "Org toggle item")
  	   "m t" '(org-todo :wk "Org todo")
  	   "m B" '(org-babel-tangle :wk "Org babel tangle")
  	   "m p" '(org-latex-preview :wk "Org Latex Math Preview")
  	   "m T" '(org-todo-list :wk "Org todo list")
  	   "m x" '(org-toggle-checkbox :wk "Org toggle checkbox")
  	   "m m" '(org-roam-node-find :wk "Org Roam find node")
  	   "m I" '(org-roam-node-insert :wk "Org Roam insert node"))

  	 (zg/leader-keys
  	   "m b" '(:ignore t :wk "Tables")
  	   "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  	 (zg/leader-keys
  	   "m" '(:ignore t :wk "Org")
  	   "m a" '(org-agenda :wk "Org agenda")
  	   "m e" '(org-export-dispatch :wk "Org export dispatch")
  	   "m t" '(org-todo :wk "Org todo")
  	   "m B" '(org-babel-tangle :wk "Org babel tangle")
  	   "m T" '(org-todo-list :wk "Org todo list")
  	   "m d t" '(org-time-stamp :wk "Org time stamp"))

   
  	 (zg/leader-keys
  	  "c" '(:ignore t :wk "Schedule") 
  	  "c s" '(org-schedule :wk "Set Org Schedule")
  	  "c d" '(org-deadline :wk "Set Org Deadline")
  	   )

  	 (zg/leader-keys
  	   "p" '(projectile-command-map :wk "Projectile"))

  	 (zg/leader-keys
  	  "t" '(:ignore t :wk "Toggle")
  	  "t e" '(eshell-toggle :wk "Toggle eshell")
  	  "t f" '(flycheck-mode :wk "Toggle flycheck")
  	  "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
  	  "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
  	  "t o" '(org-mode :wk "Toggle org mode")
  	  "t r" '(rainbow-mode :wk "Toggle rainbow mode")
  	  "t t" '(visual-line-mode :wk "Toggle truncated lines")
  	  "t v" '(vterm-toggle :wk "Toggle vterm")
  	  "t d" '(darkroom-mode :wk "Toggle darkroom"))

  	 (zg/leader-keys
  	  "s" '(:ignore t :wk "Search")
  	  "s d" '(dictionary-search :wk "Search dictionary")
  	  "s m" '(man :wk "Man pages")
  	  "s t" '(tldr :wk "Lookup TLDR docs for a command")
  	  "s w" '(woman :wk "Similar to man but doesn't require man"))

  	(zg/leader-keys
  	   "d" '(:ignore t :wk "Dired")
  	   "d d" '(dired :wk "Open dired")
  	   "d j" '(dired-jump :wk "Dired jump to current")
  	   "d n" '(neotree-dir :wk "Open directory in neotree")
  	   "d p" '(peep-dired :wk "Peep-dired"))

  	(zg/leader-keys
  	  "o" '(:ignore t :wk "Open")
  	  "o d" '(dashboard-open :wk "Dashboard")
  	  "o e" '(elfeed :wk "Elfeed RSS")
  	  "o f" '(make-frame :wk "Open buffer in new frame")
  	  "o F" '(select-frame-by-name :wk "Select frame by name"))

  	 (zg/leader-keys
  	  "w" '(:ignore t :wk "Windows")
  	  ;; Window splits
  	  "w c" '(evil-window-delete :wk "Close window")
  	  "w n" '(evil-window-new :wk "New window")
  	  "w s" '(evil-window-split :wk "Horizontal split window")
  	  "w v" '(evil-window-vsplit :wk "Vertical split window")
  	  ;; Window motions
  	  "w h" '(evil-window-left :wk "Window left")
  	  "w j" '(evil-window-down :wk "Window down")
  	  "w k" '(evil-window-up :wk "Window up")
  	  "w l" '(evil-window-right :wk "Window right")
  	  "w w" '(evil-window-next :wk "Goto next window")
  	  ;; Move Windows
  	  "w H" '(buf-move-left :wk "Buffer move left")
  	  "w J" '(buf-move-down :wk "Buffer move down")
  	  "w K" '(buf-move-up :wk "Buffer move up")
  	  "w L" '(buf-move-right :wk "Buffer move right"))
  )
#+end_src
* git
#+begin_src emacs-lisp
    (use-package git-timemachine
      :straight t
  	:after git-timemachine
  	:hook (evil-normalize-keymaps . git-timemachine-hook)
  	:config
  	  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
  	  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
  )
  (use-package magit :straight t)
#+end_src
* Fonts
#+begin_src emacs-lisp
(defun my/set-fonts ()
  (interactive)
  ;; Set font based on existing ones
  (cond
   ((find-font (font-spec :name "Monaspace Krypton"))
    (set-face-attribute 'default nil :font "Monaspace Krypton" :height 160 :weight 'medium)
    (set-face-attribute 'bold nil :weight 'extra-bold))
   ((find-font (font-spec :name "Monaspace Krypton"))
    (set-face-attribute 'default nil :font "Monaspace Krypton" :height 160)))
  (custom-set-faces
   '(tab-bar ((t (:height 0.9))))
   '(mode-line ((t (:height 0.9))))
   '(mode-line-inactive ((t (:inherit mode-line))))
   '(line-number ((t (:height 0.8 :inherit shadow))))
   '(line-number-current-line ((t (:inherit line-number))))
   '(breadcrumb-face ((t (:height 0.8))))
   '(breadcrumb-imenu-leef-face ((t (:height 1.0))))
   '(breadcrumb-project-leef-face ((t (:height 0.8))))))

;; Run on start
(add-hook 'after-init-hook #'my/set-fonts)
(add-hook 'server-after-make-frame-hook #'my/set-fonts)
;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
(use-package rainbow-mode :straight t)
#+end_src

* GUI shit
gooey shit

** turning off toolbars and scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Line numbers and truncated lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  (global-visual-line-mode t)
#+end_src

* Which Key
which fucking keys do i use, is this moonlight sonata?

#+begin_src emacs-lisp
(use-package which-key
  :straight t
	:init
	  (which-key-mode 1)
	:config
	(setq which-key-side-window-location 'bottom
		which-key-sort-order #'which-key-key-order-alpha
		which-key-sort-uppercase-first nil
-add-column-padding 1
-max-display-columns nil
		which-key-min-display-lines 6
		which-key-side-window-slot -10
		which-key-side-window-max-height 0.25
		which-key-idle-delay 0.8
		which-key-max-description-length 25
		which-key-allow-imprecise-window-fit nil
		which-key-separator " → " ))
#+end_src
* IVY (counsel)
#+begin_src emacs-lisp
(use-package counsel
	:straight t
	:after ivy
	:diminish
	:config (counsel-mode))

(use-package ivy
	:straight t
	:bind
	;; ivy-resume resumes the last Ivy-based completion.
	(("C-c C-r" . ivy-resume)
	 ("C-x B" . ivy-switch-buffer-other-window))
	:custom
	(setq ivy-use-virtual-buffers t)
	(setq ivy-count-format "(%d/%d) ")
	(setq enable-recursive-minibuffers t)
	:diminish
	:config
	(ivy-mode))

(use-package all-the-icons-ivy-rich
	:straight t
	:init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
	:after ivy
	:straight t
	:init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
	:custom
	(ivy-virtual-abbreviate 'full
	 ivy-rich-switch-buffer-align-virtual-buffer t
	 ivy-rich-path-style 'abbrev)
	:config
	(ivy-set-display-transformer 'ivy-switch-buffer
								 'ivy-rich-switch-buffer-transformer))
#+end_src
* Org Mode
** Enabling table of contents
#+begin_src emacs-lisp
(use-package toc-org
    :straight t
	:commands toc-org-enable
	:init (add-hook 'org-mode-hook 'toc-org-enable))

(use-package citeproc :straight t)
;;(use-package org-pandoc)
#+end_src

** Org styling
*** Superstar
#+begin_src emacs-lisp
(use-package org-superstar :straight t)
(setq
;;    org-superstar-headline-bullets-list '("⁖" "⁖" "⁖" "⁖" "⁖")
)
;;(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(setq org-ellipsis " ≫");; 
#+end_src

*** Olivetti
#+begin_src emacs-lisp
(use-package olivetti
  :straight t
  :config
  (message "Olivetti configuration loaded")
  (setq-default olivetti-body-width 110))

(add-hook 'org-mode-hook 'olivetti-mode)
(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode 0)))
(defun org-agenda-open-hook ()
  "Hook to be run when org-agenda is opened"
  (olivetti-mode))

#+end_src

*** Org Modern
#+begin_src emacs-lisp
(use-package org-modern
  :straight t
  :hook
  (org-mode . global-org-modern-mode)
  :custom ;; disable a bunch of shit i find useless
 (org-modern-todo nil)
 (org-modern-todo-faces nil)
 (org-modern-date nil)
 (org-modern-date-active nil)
 (org-modern-date-inactive nil)
 (org-modern-done nil)
 (org-modern-label nil)
 (org-modern-agenda nil)
 (org-modern-timestamp nil)
 (org-modern-progress nil)
 (org-modern-progress-faces nil)
 (org-modern-priority nil)
 (org-modern-priority-faces nil)
 (org-modern-symbol nil)
 (org-modern-statistics nil)
 (org-modern-tags nil)
 (org-modern-faces nil)
 (org-modern-label-border nil)
)
#+end_src

*** Org Tempo 
an org mode package that is installed with emacs but not enabled by default that lets you do cool shit faster like all the source code blocks in this config for example:

| Type the below and press TAB | Expands to...                           |
|------------------------------+-----------------------------------------|
| <a                           | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                           | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                           | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                           | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                           | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                           | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                           | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                           | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                           | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                           | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
  (require 'org-tempo)
#+end_src

*** Org PDF
#+begin_src emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
(setq org-latex-pdf-process
      '("latexmk -shell-escape -f -pdf %f"))
#+end_src

*** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
:straight t
:defer t
:hook (org-mode . org-roam-db-autosync-enable)
:config
(setq org-roam-directory (file-truename "~/Notes/roam"))
(setq org-roam-db-location (file-truename "~/Notes/roam/org-roam.db"))
)
(use-package websocket
    :straight t
    :after org-roam)

(use-package org-roam-ui
    :straight t
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files 
		'("~/Notes/Tasks.org"))
#+end_src
** Org Babel Settings
#+begin_src emacs-lisp
(use-package org-auto-tangle
:straight t
:defer t
:hook (org-mode . org-auto-tangle-mode)
:config
(setq org-auto-tangle-default t))

#+end_src

* Projectile
projekts in muh emaks
#+begin_src emacs-lisp
(use-package projectile
    :straight t
	:diminish
	:config
	(projectile-mode 1))
#+end_src
* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+begin_src emacs-lisp
  (use-package haskell-mode :straight t)
  (use-package lua-mode :straight t)
  (use-package yuck-mode :straight t)
  (use-package markdown-mode :straight t)
  (use-package typescript-mode :straight t)
#+end_src
** Diminish
#+begin_src emacs-lisp
  (use-package diminish :straight t)
#+end_src
** Flycheck
check it bro, ur code aint lookin so fly
#+begin_src emacs-lisp
  (use-package flycheck
  :straight t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src
** Company
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
    :straight t
	:defer 2
	:diminish
	:custom
	(company-begin-commands '(self-insert-command))
	(company-idle-delay .1)
	(company-minimum-prefix-length 2)
	(company-show-numbers t)
	(company-tooltip-align-annotations 't)
	(global-company-mode t))

(use-package company-box
    :straight t
	:after company
	:diminish
	:hook (company-mode . company-box-mode))
#+end_src
* Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
:straight t
:config
(setq shell-file-name "/bin/sh"
		vterm-max-scrollback 5000))
#+end_src
** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
    :straight t
	:after vterm
	:config
	(setq vterm-toggle-fullscreen-p nil)
	(setq vterm-toggle-scope 'project)
	(add-to-list 'display-buffer-alist
				 '((lambda (buffer-or-name _)
					   (let ((buffer (get-buffer buffer-or-name)))
						 (with-current-buffer buffer
						   (or (equal major-mode 'vterm-mode)
							   (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
					(display-buffer-reuse-window display-buffer-at-bottom)
					;;(display-buffer-reuse-window display-buffer-in-direction)
					;;display-buffer-in-direction/direction/dedicated is added in emacs27
					;;(direction . bottom)
					;;(dedicated . t) ;dedicated is supported in emacs27
					(reusable-frames . visible)
					(window-height . 0.3))))
#+end_src
* Sudo Edit
sudo edit is a package that lets you edit files that require sudo privileges or switch over to editing with sudo privileges

#+begin_src emacs-lisp
(use-package sudo-edit
    :straight t
	:config
	  (zg/leader-keys
		"f u" '(sudo-edit-find-file :wk "Sudo find file")
		"f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* File Mangagment
** Dired
file managment
#+begin_src emacs-lisp
  (use-package dired-open
    :straight t
	:config
	(setq dired-open-extensions '(("gif" . "sxiv")
								  ("jpg" . "sxiv")
								  ("png" . "sxiv")
								  ("pdf" . "zathura")
								  ("mkv" . "mpv")
								  ("mp4" . "mpv"))))

#+end_src

** Neotree 
file tree on the side

#+begin_src emacs-lisp
(use-package neotree
    :straight t
	:config
	(setq neo-smart-open t
		  neo-show-hidden-files t
		  neo-window-width 25 
		  neo-window-fixed-size nil
		  inhibit-compacting-font-caches t
		  projectile-switch-project-action 'neotree-projectile-action) 
		  ;; truncate long file names in neotree
		  (add-hook 'neo-after-create-hook
			 #'(lambda (_)
				 (with-current-buffer (get-buffer neo-buffer-name)
				   (setq truncate-lines t)
				   (setq word-wrap nil)
				   (make-local-variable 'auto-hscroll-mode)
				   (setq auto-hscroll-mode nil)))))
;; show hidden files

#+end_src
* Theming
r/unixporn


** color scheme
the building blocks of rice
#+begin_src emacs-lisp
(use-package doom-themes
  :straight t
  :config
  (doom-themes-org-config)
  (load-theme 'doom-gruvbox t)
  :init
  ;; (setq doom-themes-enable-bold t
  ;;       doom-themes-enable-italic t)
  ;; (doom-themes-org-config)
)
#+end_src

** Transparency
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
	:straight t
	:init (doom-modeline-mode 1)
	:config
	(setq doom-modeline-height 35      ;; sets modeline height
		  doom-modeline-bar-width 5    ;; sets right bar width
		  doom-modeline-persp-name t   ;; adds perspective name to modeline
		  doom-modeline-persp-icon t
		  doom-modeline-enable-word-count t)) ;; adds folder icon next to persp name
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
	:straight t 
	:init
	(setq initial-buffer-choice 'dashboard-open)
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	;; (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
	;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
	(setq dashboard-startup-banner "/home/nightwing/.config/emacs/images/emacs-dash.txt")  ;; use custom image as banner
	(setq dashboard-center-content t) ;; set to 't' for centered content
	(setq dashboard-items '((recents . 5)
							(agenda . 3)
							;; (bookmarks . 3)
							(projects . 3)))
	:custom
	(dashboard-modify-heading-icons '((recents . "file-text")
									  (bookmarks . "book")))
	:config
	(dashboard-setup-startup-hook))
#+end_src
