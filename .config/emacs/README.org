#+TITLE: Emacs Config
#+AUTHOR: Zeitgeist117
#+DESCRIPTION: Zeitgeist's personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle config.el

* TOC :toc:
- [[#important-startup-programs][Important Startup Programs]]
  - [[#add-scripts-to-directory-path][Add scripts to directory path]]
  - [[#sourcing-scripts][Sourcing Scripts]]
  - [[#load-evil-mode-for-my-sanity][Load Evil Mode (for my sanity)]]
  - [[#sane-defaults][Sane Defaults]]
  - [[#general-keybindings][General keybindings]]
- [[#git][Git]]
- [[#fonts][Fonts]]
  - [[#zooming-in-and-out][Zooming in and out]]
  - [[#all-the-icons][ALL THE ICONS]]
  - [[#rainbow-mode][Rainbow mode]]
- [[#gui-shit][GUI shit]]
  - [[#turning-off-toolbars-and-scrollbars][turning off toolbars and scrollbars]]
  - [[#line-numbers-and-truncated-lines][Line numbers and truncated lines]]
- [[#which-key][Which Key]]
- [[#ivy-counsel][IVY (counsel)]]
- [[#org-mode][Org Mode]]
  - [[#enabling-table-of-contents][Enabling table of contents]]
  - [[#org-bullets][Org bullets]]
  - [[#org-tempo][Org Tempo]]
  - [[#biblio][Biblio]]
  - [[#org-roam][Org Roam]]
  - [[#org-present][Org Present]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-babel-settings][Org Babel Settings]]
- [[#projectile][Projectile]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#diminish][Diminish]]
  - [[#flycheck][Flycheck]]
  - [[#company][Company]]
- [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][Sudo Edit]]
- [[#file-mangagment][File Mangagment]]
  - [[#dired][Dired]]
  - [[#neotree][Neotree]]
  - [[#tabs][Tabs]]
- [[#other-applications][Other applications]]
  - [[#elfeed-rss-reader][Elfeed (rss reader)]]
- [[#theming][Theming]]
  - [[#color-scheme][color scheme]]
  - [[#transparency][Transparency]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]

* Important Startup Programs
** Add scripts to directory path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src
** Sourcing Scripts
#+begin_src emacs-lisp
(require 'elpaca-setup)
;;(require 'straight-setup)
(require 'buffer-move)
(require 'package)
(package-initialize)
(add-to-list 'package-archives
      '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src
** Load Evil Mode (for my sanity)

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (evil-mode))  
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)
;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

#+end_src

** Sane Defaults
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq ring-bell-function 'ignore)
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files"))) ;; change backup saves location to trash folder
(setq split-width-threshold nil)
;; Remove messages from the *Messages* buffer.
(setq-default message-log-max nil)
;; Kill both buffers on startup.
(kill-buffer "*Messages*")
;; Empty the *scratch* buffer.
(setq initial-scratch-message "")
(kill-buffer "*scratch*")
;; (setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+end_src
** General keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer zg/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (zg/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "c c" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument"))

  (zg/leader-keys
    "f" '(:ignore t :wk "Files")    
    "f c" '((lambda () (interactive)
              (find-file "~/.config/emacs/README.org")) 
            :wk "Open emacs README.org")
    "f e" '((lambda () (interactive)
              (dired "~/.config/emacs/")) 
            :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "f i" '((lambda () (interactive)
              (find-file "~/.config/emacs/init.el")) 
            :wk "Open emacs init.el")
    "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "f l" '(counsel-locate :wk "Locate a file")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))

  (zg/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (zg/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e s" '(eshell :which-key "Eshell")
    "e w" '(eww :which-key "EWW emacs web wowser"))

  (zg/leader-keys
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-displatch :wk "Magit dispatch")
	"g p" '(magit-push :wk "Magit push")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

   (zg/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h t" '(load-theme :wk "Load theme")    
    "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))

   (zg/leader-keys
     "m" '(:ignore t :wk "Org")
     "m a" '(org-agenda :wk "Org agenda")
     "m e" '(org-export-dispatch :wk "Org export dispatch")
     "m i" '(org-toggle-item :wk "Org toggle item")
     "m t" '(org-todo :wk "Org todo")
     "m B" '(org-babel-tangle :wk "Org babel tangle")
     "m T" '(org-todo-list :wk "Org todo list")
     "m x" '(org-toggle-checkbox :wk "Org toggle checkbox")
     "m m" '(org-roam-node-find :wk "Org Roam find node")
     "m I" '(org-roam-node-insert :wk "Org Roam insert node"))

   (zg/leader-keys
     "m b" '(:ignore t :wk "Tables")
     "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

   (zg/leader-keys
     "m" '(:ignore t :wk "Org")
     "m a" '(org-agenda :wk "Org agenda")
     "m e" '(org-export-dispatch :wk "Org export dispatch")
     "m t" '(org-todo :wk "Org todo")
     "m B" '(org-babel-tangle :wk "Org babel tangle")
     "m T" '(org-todo-list :wk "Org todo list")
     "m d t" '(org-time-stamp :wk "Org time stamp"))

   
   (zg/leader-keys
	"c" '(:ignore t :wk "Schedule") 
	"c s" '(org-schedule :wk "Set Org Schedule")
	"c d" '(org-deadline :wk "Set Org Deadline")
	 )

   (zg/leader-keys
     "p" '(projectile-command-map :wk "Projectile"))

   (zg/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm")
    "t d" '(darkroom-mode :wk "Toggle darkroom"))

   (zg/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (zg/leader-keys
     "d" '(:ignore t :wk "Dired")
     "d d" '(dired :wk "Open dired")
     "d j" '(dired-jump :wk "Dired jump to current")
     "d n" '(neotree-dir :wk "Open directory in neotree")
     "d p" '(peep-dired :wk "Peep-dired"))

  (zg/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

   (zg/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
   

)
#+end_src
* Git
#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)

(use-package magit)
#+end_src

* Fonts
Defining all the fonts so it looks kool an so i kan reed

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 160
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 160
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 160
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)
;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src
** Zooming in and out

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other emacs programs

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Rainbow mode
touch the rainbow, taste the rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* GUI shit
gooey shit

** turning off toolbars and scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Line numbers and truncated lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
(global-visual-line-mode t)
#+end_src

* Which Key
which fucking keys do i use, is this moonlight sonata?

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
-add-column-padding 1
-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src
* IVY (counsel)
+ ivy is a completion mechanism for emacs 
+ counsel is a collection of ivy enhannced versions of common emacs commands.
+ ivy-rich allows you to add descriptionsa alongside commands in M-x

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :diminish
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src
* Org Mode
** Enabling table of contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org bullets
#+begin_src emacs-lisp
(use-package org-superstar)
;; (setq
;;     org-superstar-headline-bullets-list '("⁖" "⁖" "⁖" "⁖" "⁖")
;; )
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Org Tempo 
an org mode package that is installed with emacs but not enabled by default that lets you do cool shit faster like all the source code blocks in this config for example:

| Type the below and press TAB | Expands to...                           |
|------------------------------+-----------------------------------------|
| <a                           | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                           | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                           | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                           | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                           | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                           | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                           | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                           | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                           | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                           | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src


** Biblio 
#+begin_src emacs-lisp
(use-package biblio)
(setq biblio-download-directory "~/Downloads/")
#+end_src

** Org Roam
#+begin_src emacs-lisp
(use-package org-roam)
(setq org-roam-directory (file-truename "~/Notes/roam"))
(setq org-roam-db-autosync-mode t)
#+end_src

** Org Present
#+begin_src emacs-lisp
(use-package org-present)
#+end_src

** Org Agenda

#+begin_src emacs-lisp
(setq org-agenda-files 
	  '("~/Notes/Tasks.org"))
#+end_src

** Org Babel Settings
#+begin_src emacs-lisp
(use-package org-auto-tangle
:defer t
:hook (org-mode . org-auto-tangle-mode)
:config
(setq org-auto-tangle-default t))
#+end_src

* Projectile
projekts in muh emaks
#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :config
  (projectile-mode 1))
#+end_src

* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package lua-mode)

#+end_src
** Diminish
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** Flycheck
check it bro, ur code aint lookin so fly
#+begin_src emacs-lisp
(use-package flycheck
:ensure t
:defer t
:diminish
:init (global-flycheck-mode))
#+end_src
** Company
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* Sudo Edit
sudo edit is a package that lets you edit files that require sudo privileges or switch over to editing with sudo privileges

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (zg/leader-keys
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src
* File Mangagment
** Dired
file managment
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("pdf" . "zathura")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

;; (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
** Neotree 
file tree on the side

#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 25 
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))
;; show hidden files

#+end_src

** Tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :demand
  :config
 (centaur-tabs-mode t)
 (setq centaur-tabs-group-buffer-group -1)
 :bind
  (:map evil-normal-state-map
        ("C-k" . centaur-tabs-forward)
        ("C-j" . centaur-tabs-backward))
  )
(setq centaur-tabs-set-icons t)
(setopt centaur-tabs-buffer-groups-function (lambda () '("All")))
#+end_src
* Other applications
** Elfeed (rss reader)
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                       (
                        ))))
 

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  )

#+end_src

* Theming
r/unixporn

** color scheme
the building blocks of rice
#+begin_src emacs-lisp
(use-package dracula-theme)

(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Sets the default theme to load!!! 
  (load-theme 'doom-dracula t)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))


#+end_src

** Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth


#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  ;; (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "/home/nightwing/.config/emacs/images/emacs-dash.txt")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 3)
                          ;; (bookmarks . 3)
                          (projects . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src
