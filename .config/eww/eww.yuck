(defwindow xmonad-bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "5px"
                               :width "99.25%" ;so that it matches the gaps of the windows on my stuff 
                               :height "10px"
                               :anchor "top center")
           :stacking "bt"
           :reserve (struts :distance "40px" :side "top")
           :windowtype "dock"
           :wm-ignore false
  (centerbox
    :orientation "h"
    :class "container"
	:anchor "left"

    (Left)
    (Center)
    (Right)
  )

)  



(defwindow hypr-bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "5px"
                               :width "99.48%" ;so that it matches the gaps of the windows on my stuff 
                               :height "10px"
                               :anchor "top center")
		   :namespace "bar"
		   :exclusive "true"
  (centerbox
    :orientation "h"
    :class "container"
	:anchor "left"

    (Lefthypr)
    (Center)
    (Right)
  )

)  
(defwindow river-bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "5px"
                               :width "99.5%" ;so that it matches the gaps of the windows on my stuff 
                               :height "9px"
                               :anchor "top center")
		   :namespace "bar"
		   :exclusive "true"
  (centerbox
    :orientation "h"
    :class "container"
	:anchor "left"

    (Leftriver)
    (Center)
    (Right)
  )

)  
(defwindow hypr-bar-full
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "100%" ;so that it matches the gaps of the windows on my stuff 
                               :height "9px"
                               :anchor "top center")
		   :namespace "bar"
		   :exclusive "true"
  (centerbox
    :orientation "h"
    :class "container"
	:anchor "left"

    (Lefthypr)
    (Center)
    (Right)
  )

)  


(defwidget Left []
	(box
		:halign "start"
		(ws)
	)
)

(defwidget Lefthypr []
	(box
		:halign "start"
		(workspaces0)
	)
)
(defwidget Leftriver []
	(box
		:halign "start"
		:space-evenly false
 
(for tagnum in tags
          (tag :id tagnum
               :symbol `${tagSymbols[tagnum - 1]}`)
        )
	)
)

(defwidget Center []
    (box
	   :halign "center"
	   (title)


))



   
(defwidget Right []
  (box
    :halign "end"
    :space-evenly false
	:spacing 5
	 (Tray)
	 (systop :spacing "5")
  )
)

(defwidget Tray []
  (box
    :halign "end"
    :space-evenly false
	;; :spacing 5
	 (label :markup "<span font-weight=\"regular\">[</span>")
     (systray :class "systray" :orientation "h" :icon-size 14 :space-evenly true :spacing 2)
	 (label :markup "<span font-weight=\"regular\">]</span>")
  )
)


  

(defwidget systop []
	(box :orientation "h"
		 :space-evenly false
		 :spacing 5
		 :halign "end"
		 ;; (music-icon)
		 (CPU)
		 (mem)
		 (Time)	
		 ;; (label :text bat)	
))
	


(deflisten current-json :initial "[]"
    `ristate -t | stdbuf -o0 sed '/{"tags":{}}/d; s/├─┤ │/[]/g; s/│ ├─┤/[]/g; s/│   │/[1]/g; s/│ /[/; s/ │/]/;'`
)

(deflisten occupied-tags :initial "1" 
    `ristate -vt | stdbuf -o0 sed '/{"viewstag":{}}/d'`
)
(defwidget tag [id symbol]
    (eventbox
        :onclick `riverctl set-focused-tags \`echo "2^${id - 1}" | bc -l\``
        ( box 
		:class `tag ${id == current-json["tags"]["LGDisplay"][0] ? "active-tag" : matches(occupied-tags["viewstag"]["LGDisplay"], id) == true ? "occupied-tag" : "empty-tag"}` 
          {symbol}
        )
    )
)

(defvar tags "[1, 2, 3, 4, 5, 6, 7, 8, 9]")
(defvar tagSymbols `["一", "二", "三", "四", "五", "六", "七", "八", "九"]`)


(deflisten window :initial "..." "sh ~/.config/eww/scripts/get-window-title")
(defpoll workspace0 :interval "0.1s" "scripts/workspace.sh 0 &")
(defvar RUN_EWW "eww -c ~/.config/eww/")
(defvar SWAP_TIME_DATE 0)
(defvar SWAP_MEM 0)
(defvar SWAP_CPU 0)
(defvar TIME_ANIMATION "slideup")
(defpoll CPUP :interval "1s" "scripts/cpu")
(defpoll CPUT :interval "1s" "scripts/cputemp")
(defpoll HOUR :interval "1s" "scripts/time_info --hour")
(defpoll MINUTES :interval "1s" "scripts/time_info --minutes")
(defpoll PM_OR_AM :interval "1s" "scripts/time_info --type")
(defpoll DATE :interval "1s" "scripts/time_info --date")
(defpoll mem :interval "1s" "scripts/mem")
(defpoll memp :interval "1s"	"scripts/memp")
(defpoll music :interval "1s" "scripts/music")
(defpoll musicicon :interval "1s" "scripts/music_icon")

;; (defpoll bat :interval "1s"
;; 	"scripts/bat")

(defwidget workspaces0 []
  (literal :content workspace0))

(deflisten ws
  "scripts/ws")

(defwidget ws []
      (box
        :halign "start"
        :valign "center"
        (literal :content ws))
      ) 
(defwidget title []
    (label :text window)
)   
(defwidget music-icon []
		   (eventbox
			(label :markup "<span font-weight=\"regular\">[${musicicon}]</span>" :tooltip music)
))
(defwidget music []
		   (box
			(label :markup "<span font-weight=\"regular\">[${music}]</span>")

))

(defwidget CPU []
		   (eventbox :onhover "${RUN_EWW} update SWAP_CPU=1 TIME_ANIMATION='slidedown'" :onhoverlost "${RUN_EWW} update SWAP_CPU=0 TIME_ANIMATION='slideup'"
      (stack :selected SWAP_CPU :transition TIME_ANIMATION :class "cpu" :same-size false
		 (label :markup "<span font-weight=\"regular\">${CPUP}</span>")	
(label :markup "<span font-weight=\"regular\">[${CPUT}]</span>" ))
))

(defwidget mem []
		   (eventbox :onhover "${RUN_EWW} update SWAP_MEM=1 TIME_ANIMATION='slidedown'" :onhoverlost "${RUN_EWW} update SWAP_MEM=0 TIME_ANIMATION='slideup'"
      (stack :selected SWAP_MEM :transition TIME_ANIMATION :class "mem" :same-size false
		 (label :markup "<span font-weight=\"regular\">${memp}</span>" :tooltip mem)	
(label :markup "<span font-weight=\"regular\">[${mem}]</span>" ))
))
(defwidget Time []
  (eventbox :onhover "${RUN_EWW} update SWAP_TIME_DATE=1 TIME_ANIMATION='slidedown'" :onhoverlost "${RUN_EWW} update SWAP_TIME_DATE=0 TIME_ANIMATION='slideup'"
    (button :onclick "${RUN_EWW} close calendar || ${RUN_EWW} open calendar"
      (stack :selected SWAP_TIME_DATE :transition TIME_ANIMATION :class "time" :same-size false
        (label :markup "<span font-weight=\"regular\">[󱑁 ${HOUR}</span><span font-weight=\"regular\">:${MINUTES}</span><span font-weight=\"regular\"font-size=\"small\">${PM_OR_AM}</span><span font-weight=\"regular\">]</span>")
        (label :markup "<span font-weight=\"regular\">[${DATE}]</span>" )))))

;;POPUP CALENDAR WINDOW
(defwindow calendar
  :monitor 0
  :geometry (geometry :anchor "top right" :y 10 :x 10 :width 300 :height 100 )
  :stacking "fg"
  :windowtype "normal"
  (box :class "popup-window" :orientation "h" :valign "fill" :halign "fill"
    (calendar :show-details true :show-heading true :show-day-names true)))
