(defwindow xmonad-bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "5px"
                               :width "99.25%" ;so that it matches the gaps of the windows on my stuff 
                               :height "10px"
                               :anchor "top center")
           :stacking "bt"
           :reserve (struts :distance "40px" :side "top")
           :windowtype "dock"
           :wm-ignore false
  (centerbox
    :orientation "h"
    :class "container"
	:anchor "left"

    (Left)
    (Center)
    (Right)
  )

)  



(defwindow hypr-bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "5px"
                               :width "99.5%" ;so that it matches the gaps of the windows on my stuff 
                               :height "9px"
                               :anchor "top center")
		   :namespace "bar"
		   :exclusive "true"
  (centerbox
    :orientation "h"
    :class "container"
	:anchor "left"

    (Lefthypr)
    (Center)
    (Right)
  )

)  


(defwidget Left []
	(box
		:halighn "start"
		(ws)
	)
)

(defwidget Lefthypr []
	(box
		:halighn "start"
		(workspaces0)
	)
)

(defwidget Center []
    (box
	   :halign "center"
	   (title)


))



   
(defwidget Right []
  (box
    :halign "end"
    :space-evenly false

     (systray
      :class "systray"
      :orientation "h"
      :icon-size 12
      :space-evenly false
      :spacing 4
    )
	 ; apparently having a system tray was this fucking easy but no one told me so it took me 6 months to find a config that openly just had this ^
	 ;; (cpu)
	 ;; (ram)
	 (systop)
  )
)

(defpoll workspace0 :interval "0.1s"
  "scripts/workspace.sh 0 &")

;; (deflisten workspace0
;;   "scripts/workspace.sh 0")
(defwidget workspaces0 []
  (literal :content workspace0))

(deflisten ws
  "scripts/ws")

(defwidget ws []
      (box
        :halign "start"
        :valign "center"
        (literal :content ws))
      ) 

(deflisten window :initial "..." "sh ~/.config/eww/scripts/get-window-title")
(defwidget title []
  (box
    (label :text "${window}"))
)   
  

(defwidget systop []
	(box :orientation "h"
		 :space-evenly false
		 :spacing 5
		 :halign "end"
		 (label :text proc :tooltip cput)	
		 (label :text memp :tooltip mem)	
		 (label :text date)	
		 (label :text time)	
		 ;; (label :text bat)	
))
	
(defwidget ram []
		   (box
			:class "memory"
			:orientation "h"
			:spacing 5
			:space-evenly true
			;; :halign "end"
			:visible {EWW_RAM.used_mem_perc} "${round(EWW_RAM.used_mem_perc,00)}%"))


(defwidget cpu []
		   (box
			:class "memory"
			:orientation "h"
			:space-evenly true
			:spacing 5
			;; :halign "end"
			:label "CPU"
			:visible {EWW_CPU.avg} "${round(EWW_CPU.avg,0)}%"))



(defwidget date []
	(box :orientation "h"
		 :space-evenly false
		 :spacing 5
		 :halign "end"
		 (label :text date)	
))

(defwidget time []
	(box :orientation "h"
		 :space-evenly false
		 :spacing 5
		 :halign "end"
		 (label :text time)	
))



(defpoll time :interval "1s"
	"scripts/time")

(defpoll date :interval "600s"
	"scripts/date")

(defpoll proc :interval "1s"
    "scripts/cpu")

(defpoll cput :interval "10s"
    "scripts/cput")

(defpoll mem :interval "1s"
	"scripts/mem")

(defpoll memp :interval "1s"
	"scripts/memp")

;; (defpoll bat :interval "1s"
;; 	"scripts/bat")
